
WirelessTemp Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a48  00000afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a48  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000b0e  2**0
                  ALLOC
  3 .eeprom       0000001b  00810000  00810000  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b29  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000198  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001988  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000706  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000741  00000000  00000000  00002dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ca  00000000  00000000  000039a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001413  00000000  00000000  00003f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001a0  00000000  00000000  00005381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  10:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_6>
  1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  34:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	d0 79       	andi	r29, 0x90	; 144
  6a:	70 79       	andi	r23, 0x90	; 144
  6c:	30 79       	andi	r19, 0x90	; 144
  6e:	d0 78       	andi	r29, 0x80	; 128
  70:	70 78       	andi	r23, 0x80	; 128
  72:	10 78       	andi	r17, 0x80	; 128
  74:	a0 77       	andi	r26, 0x70	; 112
  76:	40 77       	andi	r20, 0x70	; 112
  78:	e0 76       	andi	r30, 0x60	; 96
  7a:	70 76       	andi	r23, 0x60	; 96
  7c:	00 76       	andi	r16, 0x60	; 96
  7e:	80 75       	andi	r24, 0x50	; 80
  80:	10 75       	andi	r17, 0x50	; 80
  82:	90 74       	andi	r25, 0x40	; 64
  84:	10 74       	andi	r17, 0x40	; 64
  86:	90 73       	andi	r25, 0x30	; 48
  88:	10 73       	andi	r17, 0x30	; 48
  8a:	70 72       	andi	r23, 0x20	; 32
  8c:	f0 71       	andi	r31, 0x10	; 16
  8e:	50 71       	andi	r21, 0x10	; 16
  90:	d0 70       	andi	r29, 0x00	; 0
  92:	30 70       	andi	r19, 0x00	; 0
  94:	90 6f       	ori	r25, 0xF0	; 240
  96:	00 6f       	ori	r16, 0xF0	; 240
  98:	50 6e       	ori	r21, 0xE0	; 224
  9a:	b0 6d       	ori	r27, 0xD0	; 208
  9c:	10 6d       	ori	r17, 0xD0	; 208
  9e:	60 6c       	ori	r22, 0xC0	; 192
  a0:	c0 6b       	ori	r28, 0xB0	; 176
  a2:	10 6b       	ori	r17, 0xB0	; 176
  a4:	60 6a       	ori	r22, 0xA0	; 160
  a6:	a0 69       	ori	r26, 0x90	; 144
  a8:	00 69       	ori	r16, 0x90	; 144
  aa:	40 68       	ori	r20, 0x80	; 128
  ac:	80 67       	ori	r24, 0x70	; 112
  ae:	c0 66       	ori	r28, 0x60	; 96
  b0:	20 66       	ori	r18, 0x60	; 96
  b2:	60 65       	ori	r22, 0x50	; 80
  b4:	a0 64       	ori	r26, 0x40	; 64
  b6:	e0 63       	ori	r30, 0x30	; 48
  b8:	20 63       	ori	r18, 0x30	; 48
  ba:	60 62       	ori	r22, 0x20	; 32
  bc:	a0 61       	ori	r26, 0x10	; 16
  be:	e0 60       	ori	r30, 0x00	; 0
  c0:	20 60       	ori	r18, 0x00	; 0
  c2:	60 5f       	subi	r22, 0xF0	; 240
  c4:	a0 5e       	subi	r26, 0xE0	; 224
  c6:	e0 5d       	subi	r30, 0xD0	; 208
  c8:	20 5d       	subi	r18, 0xD0	; 208
  ca:	60 5c       	subi	r22, 0xC0	; 192
  cc:	b0 5b       	subi	r27, 0xB0	; 176
  ce:	f0 5a       	subi	r31, 0xA0	; 160
  d0:	40 5a       	subi	r20, 0xA0	; 160
  d2:	80 59       	subi	r24, 0x90	; 144
  d4:	d0 58       	subi	r29, 0x80	; 128
  d6:	20 58       	subi	r18, 0x80	; 128
  d8:	60 57       	subi	r22, 0x70	; 112
  da:	b0 56       	subi	r27, 0x60	; 96
  dc:	10 56       	subi	r17, 0x60	; 96
  de:	50 55       	subi	r21, 0x50	; 80
  e0:	b0 54       	subi	r27, 0x40	; 64
  e2:	00 54       	subi	r16, 0x40	; 64
  e4:	60 53       	subi	r22, 0x30	; 48
  e6:	b0 52       	subi	r27, 0x20	; 32
  e8:	10 52       	subi	r17, 0x20	; 32
  ea:	70 51       	subi	r23, 0x10	; 16
  ec:	d0 50       	subi	r29, 0x00	; 0
  ee:	30 50       	subi	r19, 0x00	; 0
  f0:	90 4f       	sbci	r25, 0xF0	; 240
  f2:	00 4f       	sbci	r16, 0xF0	; 240
  f4:	70 4e       	sbci	r23, 0xE0	; 224
  f6:	e0 4d       	sbci	r30, 0xD0	; 208
  f8:	40 4d       	sbci	r20, 0xD0	; 208
  fa:	c0 4c       	sbci	r28, 0xC0	; 192
  fc:	20 4c       	sbci	r18, 0xC0	; 192
  fe:	a0 4b       	sbci	r26, 0xB0	; 176
 100:	20 4b       	sbci	r18, 0xB0	; 176
 102:	a0 4a       	sbci	r26, 0xA0	; 160
 104:	20 4a       	sbci	r18, 0xA0	; 160
 106:	a0 49       	sbci	r26, 0x90	; 144
 108:	20 49       	sbci	r18, 0x90	; 144
 10a:	b0 48       	sbci	r27, 0x80	; 128
 10c:	30 48       	sbci	r19, 0x80	; 128
 10e:	c0 47       	sbci	r28, 0x70	; 112
 110:	50 47       	sbci	r21, 0x70	; 112
 112:	e0 46       	sbci	r30, 0x60	; 96
 114:	80 46       	sbci	r24, 0x60	; 96
 116:	10 46       	sbci	r17, 0x60	; 96
 118:	a0 45       	sbci	r26, 0x50	; 80
 11a:	40 45       	sbci	r20, 0x50	; 80
 11c:	e0 44       	sbci	r30, 0x40	; 64

0000011e <__ctors_end>:
 11e:	11 24       	eor	r1, r1
 120:	1f be       	out	0x3f, r1	; 63
 122:	cf ef       	ldi	r28, 0xFF	; 255
 124:	d8 e0       	ldi	r29, 0x08	; 8
 126:	de bf       	out	0x3e, r29	; 62
 128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
 12a:	11 e0       	ldi	r17, 0x01	; 1
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	e8 e4       	ldi	r30, 0x48	; 72
 132:	fa e0       	ldi	r31, 0x0A	; 10
 134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
 136:	05 90       	lpm	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	a2 31       	cpi	r26, 0x12	; 18
 13c:	b1 07       	cpc	r27, r17
 13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	a2 e1       	ldi	r26, 0x12	; 18
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
 148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
 14a:	a4 31       	cpi	r26, 0x14	; 20
 14c:	b2 07       	cpc	r27, r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
 150:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
 154:	0c 94 22 05 	jmp	0xa44	; 0xa44 <_exit>

00000158 <__bad_interrupt>:
 158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <__vector_6>:
volatile uint8_t seconds;
	uint8_t sleepIterations = 0;

/* ------------------------------------------------------------------------- */
ISR(WDT_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
	// Set the watchdog activated flag.
	// Note that you shouldn't do much work inside an interrupt handler.
	watchdogActivated = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 00 01 	sts	0x0100, r24
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <sleep>:
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
void sleep()
{
	// Set sleep to full power down.  Only external interrupts or
	// the watchdog timer can wake the CPU!
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 17a:	83 b7       	in	r24, 0x33	; 51
 17c:	81 7f       	andi	r24, 0xF1	; 241
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	83 bf       	out	0x33, r24	; 51

	// Disable the ADC while asleep.
	power_adc_disable();
 182:	e4 e6       	ldi	r30, 0x64	; 100
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24

	// Enable sleep.
	sleep_enable();
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	83 bf       	out	0x33, r24	; 51
	
	// Disable brown-out detection during sleep.  This is timing critical and
	// must be done right before entering sleep mode.
	MCUCR |= (1<<BODS) | (1<<BODSE);
 192:	85 b7       	in	r24, 0x35	; 53
 194:	80 66       	ori	r24, 0x60	; 96
 196:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<BODSE);
 198:	85 b7       	in	r24, 0x35	; 53
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	85 bf       	out	0x35, r24	; 53
	
	// Enter sleep mode.
	sleep_cpu();
 19e:	88 95       	sleep

	// CPU is now asleep and program execution completely halts!
	// Once awake, execution will resume at this point.
	
	// When awake, disable sleep mode and turn on all devices.
	sleep_disable();
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	8e 7f       	andi	r24, 0xFE	; 254
 1a4:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
 1a6:	80 81       	ld	r24, Z
 1a8:	80 71       	andi	r24, 0x10	; 16
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <calc_temperature>:
	//ACK

}
// This function is calculating temperature in tenth of degree of Celsius
// depending on ADC sum value as input parameter.
int16_t calc_temperature(temperature_table_entry_type adcsum) {
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
}
//ISR(TIMER1_COMPA_vect)
//{
	//++seconds;
//}
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
 1b2:	ee e1       	ldi	r30, 0x1E	; 30
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	e4 91       	lpm	r30, Z
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
	temperature_table_index_type l = 0;
	temperature_table_index_type r = adcValues;
	temperature_table_entry_type thigh = TEMPERATURE_TABLE_READ(r);
	
	// Checking for bound values
	if (adcsum <= thigh) {
 1ba:	e8 17       	cp	r30, r24
 1bc:	f9 07       	cpc	r31, r25
 1be:	38 f0       	brcs	.+14     	; 0x1ce <calc_temperature+0x20>
		#ifdef TEMPERATURE_UNDER
		if (adcsum < thigh)
 1c0:	8e 17       	cp	r24, r30
 1c2:	9f 07       	cpc	r25, r31
 1c4:	08 f4       	brcc	.+2      	; 0x1c8 <calc_temperature+0x1a>
 1c6:	8a c0       	rjmp	.+276    	; 0x2dc <calc_temperature+0x12e>
		return TEMPERATURE_UNDER;
		#endif
		return TEMPERATURE_TABLE_STEP * r + TEMPERATURE_TABLE_START;
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	8e c0       	rjmp	.+284    	; 0x2ea <calc_temperature+0x13c>
}
//ISR(TIMER1_COMPA_vect)
//{
	//++seconds;
//}
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
 1ce:	e8 e6       	ldi	r30, 0x68	; 104
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	e4 91       	lpm	r30, Z
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
		return TEMPERATURE_UNDER;
		#endif
		return TEMPERATURE_TABLE_STEP * r + TEMPERATURE_TABLE_START;
	}
	temperature_table_entry_type tlow = TEMPERATURE_TABLE_READ(0);
	if (adcsum >= tlow) {
 1d6:	8e 17       	cp	r24, r30
 1d8:	9f 07       	cpc	r25, r31
 1da:	c0 f0       	brcs	.+48     	; 0x20c <calc_temperature+0x5e>
		#ifdef TEMPERATURE_OVER
		if (adcsum > tlow)
 1dc:	e8 17       	cp	r30, r24
 1de:	f9 07       	cpc	r31, r25
 1e0:	08 f4       	brcc	.+2      	; 0x1e4 <calc_temperature+0x36>
 1e2:	7f c0       	rjmp	.+254    	; 0x2e2 <calc_temperature+0x134>
		return TEMPERATURE_OVER;
		#endif
		return TEMPERATURE_TABLE_START;
 1e4:	80 e7       	ldi	r24, 0x70	; 112
 1e6:	9e ef       	ldi	r25, 0xFE	; 254
 1e8:	80 c0       	rjmp	.+256    	; 0x2ea <calc_temperature+0x13c>
	}

	// Table lookup using binary search
	while ((r - l) > 1) {
		//temperature_table_index_type m = (l + r) >> 1;
		temperature_table_entry_type mid = TEMPERATURE_TABLE_READ((l + r) >> 1);
 1ea:	24 0f       	add	r18, r20
 1ec:	35 1f       	adc	r19, r21
 1ee:	35 95       	asr	r19
 1f0:	27 95       	ror	r18
 1f2:	62 2f       	mov	r22, r18
}
//ISR(TIMER1_COMPA_vect)
//{
	//++seconds;
//}
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
 1f4:	f9 01       	movw	r30, r18
 1f6:	ff 27       	eor	r31, r31
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e8 59       	subi	r30, 0x98	; 152
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	e4 91       	lpm	r30, Z
 202:	f0 e0       	ldi	r31, 0x00	; 0

	// Table lookup using binary search
	while ((r - l) > 1) {
		//temperature_table_index_type m = (l + r) >> 1;
		temperature_table_entry_type mid = TEMPERATURE_TABLE_READ((l + r) >> 1);
		if (adcsum > mid) {
 204:	e8 17       	cp	r30, r24
 206:	f9 07       	cpc	r31, r25
 208:	30 f0       	brcs	.+12     	; 0x216 <calc_temperature+0x68>
 20a:	02 c0       	rjmp	.+4      	; 0x210 <calc_temperature+0x62>
 20c:	ab e5       	ldi	r26, 0x5B	; 91
 20e:	60 e0       	ldi	r22, 0x00	; 0
		#endif
		return TEMPERATURE_TABLE_START;
	}

	// Table lookup using binary search
	while ((r - l) > 1) {
 210:	46 2f       	mov	r20, r22
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	01 c0       	rjmp	.+2      	; 0x218 <calc_temperature+0x6a>
		//temperature_table_index_type m = (l + r) >> 1;
		temperature_table_entry_type mid = TEMPERATURE_TABLE_READ((l + r) >> 1);
 216:	a2 2f       	mov	r26, r18
		#endif
		return TEMPERATURE_TABLE_START;
	}

	// Table lookup using binary search
	while ((r - l) > 1) {
 218:	2a 2f       	mov	r18, r26
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	ba 01       	movw	r22, r20
 21e:	f9 01       	movw	r30, r18
 220:	e4 1b       	sub	r30, r20
 222:	f5 0b       	sbc	r31, r21
 224:	32 97       	sbiw	r30, 0x02	; 2
 226:	0c f7       	brge	.-62     	; 0x1ea <calc_temperature+0x3c>
}
//ISR(TIMER1_COMPA_vect)
//{
	//++seconds;
//}
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
 228:	fa 01       	movw	r30, r20
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e8 59       	subi	r30, 0x98	; 152
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	e4 91       	lpm	r30, Z
 234:	4e 2f       	mov	r20, r30
 236:	50 e0       	ldi	r21, 0x00	; 0
		} else {
			l = (l + r) >> 1;
		}
	}
	temperature_table_entry_type vl = TEMPERATURE_TABLE_READ(l);
	if (adcsum >= vl) {
 238:	84 17       	cp	r24, r20
 23a:	95 07       	cpc	r25, r21
 23c:	78 f0       	brcs	.+30     	; 0x25c <calc_temperature+0xae>
		return l * TEMPERATURE_TABLE_STEP + TEMPERATURE_TABLE_START;
 23e:	cb 01       	movw	r24, r22
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	68 0f       	add	r22, r24
 252:	79 1f       	adc	r23, r25
 254:	cb 01       	movw	r24, r22
 256:	80 59       	subi	r24, 0x90	; 144
 258:	91 40       	sbci	r25, 0x01	; 1
 25a:	47 c0       	rjmp	.+142    	; 0x2ea <calc_temperature+0x13c>
}
//ISR(TIMER1_COMPA_vect)
//{
	//++seconds;
//}
uint16_t TEMPERATURE_TABLE_READ(uint8_t i) {return pgm_read_byte(&termo_table[i]);}
 25c:	d9 01       	movw	r26, r18
 25e:	aa 0f       	add	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	fd 01       	movw	r30, r26
 264:	e8 59       	subi	r30, 0x98	; 152
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	64 91       	lpm	r22, Z
 26a:	70 e0       	ldi	r23, 0x00	; 0
	temperature_table_entry_type vl = TEMPERATURE_TABLE_READ(l);
	if (adcsum >= vl) {
		return l * TEMPERATURE_TABLE_STEP + TEMPERATURE_TABLE_START;
	}
	temperature_table_entry_type vr = TEMPERATURE_TABLE_READ(r);
	temperature_table_entry_type vd = vl - vr;
 26c:	fa 01       	movw	r30, r20
 26e:	e6 1b       	sub	r30, r22
 270:	f7 0b       	sbc	r31, r23
	int16_t res = TEMPERATURE_TABLE_START + r * TEMPERATURE_TABLE_STEP;
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	2a 0f       	add	r18, r26
 280:	3b 1f       	adc	r19, r27
 282:	e9 01       	movw	r28, r18
 284:	c0 59       	subi	r28, 0x90	; 144
 286:	d1 40       	sbci	r29, 0x01	; 1
	if (vd) {
 288:	30 97       	sbiw	r30, 0x00	; 0
 28a:	71 f1       	breq	.+92     	; 0x2e8 <calc_temperature+0x13a>
		// Linear interpolation
		res -= ((TEMPERATURE_TABLE_STEP * (int32_t)(adcsum - vr) + (vd >> 1)) / vd);
 28c:	86 1b       	sub	r24, r22
 28e:	97 0b       	sbc	r25, r23
 290:	a0 e0       	ldi	r26, 0x00	; 0
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	ac 01       	movw	r20, r24
 29e:	bd 01       	movw	r22, r26
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	66 1f       	adc	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	84 0f       	add	r24, r20
 2b2:	95 1f       	adc	r25, r21
 2b4:	a6 1f       	adc	r26, r22
 2b6:	b7 1f       	adc	r27, r23
 2b8:	9f 01       	movw	r18, r30
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	bc 01       	movw	r22, r24
 2c0:	cd 01       	movw	r24, r26
 2c2:	62 0f       	add	r22, r18
 2c4:	73 1f       	adc	r23, r19
 2c6:	81 1d       	adc	r24, r1
 2c8:	91 1d       	adc	r25, r1
 2ca:	9f 01       	movw	r18, r30
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	0e 94 86 04 	call	0x90c	; 0x90c <__divmodsi4>
 2d4:	ce 01       	movw	r24, r28
 2d6:	82 1b       	sub	r24, r18
 2d8:	93 0b       	sbc	r25, r19
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <calc_temperature+0x13c>
	
	// Checking for bound values
	if (adcsum <= thigh) {
		#ifdef TEMPERATURE_UNDER
		if (adcsum < thigh)
		return TEMPERATURE_UNDER;
 2dc:	80 e7       	ldi	r24, 0x70	; 112
 2de:	9e ef       	ldi	r25, 0xFE	; 254
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <calc_temperature+0x13c>
	}
	temperature_table_entry_type tlow = TEMPERATURE_TABLE_READ(0);
	if (adcsum >= tlow) {
		#ifdef TEMPERATURE_OVER
		if (adcsum > tlow)
		return TEMPERATURE_OVER;
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <calc_temperature+0x13c>
	if (adcsum >= vl) {
		return l * TEMPERATURE_TABLE_STEP + TEMPERATURE_TABLE_START;
	}
	temperature_table_entry_type vr = TEMPERATURE_TABLE_READ(r);
	temperature_table_entry_type vd = vl - vr;
	int16_t res = TEMPERATURE_TABLE_START + r * TEMPERATURE_TABLE_STEP;
 2e8:	ce 01       	movw	r24, r28
	if (vd) {
		// Linear interpolation
		res -= ((TEMPERATURE_TABLE_STEP * (int32_t)(adcsum - vr) + (vd >> 1)) / vd);
	}
	return res;
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
void adc_init()
{

}
int main()
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	c4 57       	subi	r28, 0x74	; 116
 2fa:	d1 09       	sbc	r29, r1
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
	uint8_t keyVal[16];
	uint8_t rxAdr[5];
	uint8_t txAdr[5];
	uint8_t pairedVal = 0;
		cli();
 306:	f8 94       	cli
		
		// Set the watchdog reset bit in the MCU status register to 0.
		MCUSR &= ~(1<<WDRF);
 308:	84 b7       	in	r24, 0x34	; 52
 30a:	87 7f       	andi	r24, 0xF7	; 247
 30c:	84 bf       	out	0x34, r24	; 52
		
		// Set WDCE and WDE bits in the watchdog control register.
		WDTCSR |= (1<<WDCE) | (1<<WDE);
 30e:	e0 e6       	ldi	r30, 0x60	; 96
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	88 61       	ori	r24, 0x18	; 24
 316:	80 83       	st	Z, r24

		// Set watchdog clock prescaler bits to a value of 8 seconds.
		WDTCSR = (1<<WDP0) | (1<<WDP3);
 318:	81 e2       	ldi	r24, 0x21	; 33
 31a:	80 83       	st	Z, r24
		
		 //Enable watchdog as interrupt only (no reset).
		WDTCSR |= (1<<WDIE);
 31c:	80 81       	ld	r24, Z
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 83       	st	Z, r24
		//TCCR1B |= (1 << CS10);
		//TCCR1B |= (1 << CS12);
		//// enable timer compare interrupt:
		//TIMSK1 |= (1 << OCIE1A);
		 //Enable interrupts again.
		sei();
 322:	78 94       	sei
	/* init hardware pins */
		eeprom_read_block(&txAdr,&txAddr,5);
 324:	45 e0       	ldi	r20, 0x05	; 5
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	06 96       	adiw	r24, 0x06	; 6
 330:	0e 94 12 05 	call	0xa24	; 0xa24 <eeprom_read_block>

		eeprom_read_block(&rxAdr,&rxAddr,5);
 334:	45 e0       	ldi	r20, 0x05	; 5
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	ce 01       	movw	r24, r28
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	0e 94 12 05 	call	0xa24	; 0xa24 <eeprom_read_block>
		nrf24_init(2,32,rxAdr,txAdr);
 344:	9e 01       	movw	r18, r28
 346:	2a 5f       	subi	r18, 0xFA	; 250
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	ae 01       	movw	r20, r28
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	60 e2       	ldi	r22, 0x20	; 32
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 04 03 	call	0x608	; 0x608 <nrf24_init>

	        nrf24_powerUpRx();
 358:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <nrf24_powerUpRx>
//	nrf24_send("test5678901234567890123456789012");
	
	/* Channel #2 , payload length: 32 */

	// AREF = AVcc
	ADMUX = (1<<REFS0);
 35c:	80 e4       	ldi	r24, 0x40	; 64
 35e:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//
 362:	87 e8       	ldi	r24, 0x87	; 135
 364:	80 93 7a 00 	sts	0x007A, r24
		
	}
}
static void sendData(char* id) {

	char Payload[32] = "111";
 368:	0f 2e       	mov	r0, r31
 36a:	f1 e3       	ldi	r31, 0x31	; 49
 36c:	4f 2e       	mov	r4, r31
 36e:	54 2c       	mov	r5, r4
 370:	64 2c       	mov	r6, r4
 372:	71 2c       	mov	r7, r1
 374:	f0 2d       	mov	r31, r0
 376:	0f 2e       	mov	r0, r31
 378:	fc e1       	ldi	r31, 0x1C	; 28
 37a:	9f 2e       	mov	r9, r31
 37c:	f0 2d       	mov	r31, r0
 37e:	5e 01       	movw	r10, r28
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	a8 0e       	add	r10, r24
 384:	b1 1c       	adc	r11, r1
	char tempstr[29] = "";
 386:	19 e1       	ldi	r17, 0x19	; 25
 388:	0f 2e       	mov	r0, r31
 38a:	f8 e4       	ldi	r31, 0x48	; 72
 38c:	cf 2e       	mov	r12, r31
 38e:	d1 2c       	mov	r13, r1
 390:	f0 2d       	mov	r31, r0
 392:	cc 0e       	add	r12, r28
 394:	dd 1e       	adc	r13, r29
 396:	e4 e0       	ldi	r30, 0x04	; 4
 398:	ce 0e       	add	r12, r30
 39a:	d1 1c       	adc	r13, r1
		char tempstrE[29] = "";
 39c:	7e 01       	movw	r14, r28
 39e:	ff e2       	ldi	r31, 0x2F	; 47
 3a0:	ef 0e       	add	r14, r31
 3a2:	f1 1c       	adc	r15, r1
			uint8_t keyVal[16] =  {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 3a4:	00 e1       	ldi	r16, 0x10	; 16
			//	PORTB = (1<<5);



while (1) {
		if (watchdogActivated)
 3a6:	80 91 00 01 	lds	r24, 0x0100
 3aa:	88 23       	and	r24, r24
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0xc0>
 3ae:	54 c0       	rjmp	.+168    	; 0x458 <main+0x168>
		{
			watchdogActivated = 0;
 3b0:	10 92 00 01 	sts	0x0100, r1
			
			// Increase the count of sleep iterations and take a sensor
			// reading once the max number of iterations has been hit.
			if (++sleepIterations >= MAX_SLEEP_ITERATIONS) {
 3b4:	80 91 12 01 	lds	r24, 0x0112
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	19 f4       	brne	.+6      	; 0x3c2 <main+0xd2>
 3bc:	10 92 12 01 	sts	0x0112, r1
 3c0:	4b c0       	rjmp	.+150    	; 0x458 <main+0x168>
			//				PORTB = (1<<5);

				// Reset the number of sleep iterations.
				sleepIterations = 0;
 3c2:	10 92 12 01 	sts	0x0112, r1
		
	}
}
static void sendData(char* id) {

	char Payload[32] = "111";
 3c6:	4b 86       	std	Y+11, r4	; 0x0b
 3c8:	5c 86       	std	Y+12, r5	; 0x0c
 3ca:	6d 86       	std	Y+13, r6	; 0x0d
 3cc:	7e 86       	std	Y+14, r7	; 0x0e
 3ce:	f5 01       	movw	r30, r10
 3d0:	89 2d       	mov	r24, r9
 3d2:	11 92       	st	Z+, r1
 3d4:	8a 95       	dec	r24
 3d6:	e9 f7       	brne	.-6      	; 0x3d2 <main+0xe2>
	char tempstr[29] = "";
 3d8:	2c 96       	adiw	r28, 0x0c	; 12
 3da:	1c ae       	std	Y+60, r1	; 0x3c
 3dc:	1d ae       	std	Y+61, r1	; 0x3d
 3de:	1e ae       	std	Y+62, r1	; 0x3e
 3e0:	1f ae       	std	Y+63, r1	; 0x3f
 3e2:	2c 97       	sbiw	r28, 0x0c	; 12
 3e4:	f6 01       	movw	r30, r12
 3e6:	81 2f       	mov	r24, r17
 3e8:	11 92       	st	Z+, r1
 3ea:	8a 95       	dec	r24
 3ec:	e9 f7       	brne	.-6      	; 0x3e8 <main+0xf8>
		char tempstrE[29] = "";
 3ee:	1b a6       	std	Y+43, r1	; 0x2b
 3f0:	1c a6       	std	Y+44, r1	; 0x2c
 3f2:	1d a6       	std	Y+45, r1	; 0x2d
 3f4:	1e a6       	std	Y+46, r1	; 0x2e
 3f6:	f7 01       	movw	r30, r14
 3f8:	81 2f       	mov	r24, r17
 3fa:	11 92       	st	Z+, r1
 3fc:	8a 95       	dec	r24
 3fe:	e9 f7       	brne	.-6      	; 0x3fa <main+0x10a>
			uint8_t keyVal[16] =  {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
 400:	e1 e0       	ldi	r30, 0x01	; 1
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	de 01       	movw	r26, r28
 406:	ab 59       	subi	r26, 0x9B	; 155
 408:	bf 4f       	sbci	r27, 0xFF	; 255
 40a:	80 2f       	mov	r24, r16
 40c:	01 90       	ld	r0, Z+
 40e:	0d 92       	st	X+, r0
 410:	8a 95       	dec	r24
 412:	e1 f7       	brne	.-8      	; 0x40c <main+0x11c>
	//} while (--i);


	//PORTB = (0<<5);

	tempC = calc_temperature(summ);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 d7 00 	call	0x1ae	; 0x1ae <calc_temperature>

	itoa(tempC,tempstr,10);
 41c:	4a e0       	ldi	r20, 0x0A	; 10
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	be 01       	movw	r22, r28
 422:	68 5b       	subi	r22, 0xB8	; 184
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <itoa>
	xtea_enc(tempstrE,tempstr,keyVal);
 42a:	ae 01       	movw	r20, r28
 42c:	4b 59       	subi	r20, 0x9B	; 155
 42e:	5f 4f       	sbci	r21, 0xFF	; 255
 430:	be 01       	movw	r22, r28
 432:	68 5b       	subi	r22, 0xB8	; 184
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	ce 01       	movw	r24, r28
 438:	8b 96       	adiw	r24, 0x2b	; 43
 43a:	0e 94 b9 03 	call	0x772	; 0x772 <xtea_enc>
	//strcat(Payload, 1);
	strcat(Payload,tempstrE);
 43e:	be 01       	movw	r22, r28
 440:	65 5d       	subi	r22, 0xD5	; 213
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	ce 01       	movw	r24, r28
 446:	0b 96       	adiw	r24, 0x0b	; 11
 448:	0e 94 c7 04 	call	0x98e	; 0x98e <strcat>


	/* Automatically goes to TX mode */
	nrf24_send(Payload);
 44c:	ce 01       	movw	r24, r28
 44e:	0b 96       	adiw	r24, 0x0b	; 11
 450:	0e 94 74 03 	call	0x6e8	; 0x6e8 <nrf24_send>
	//temp = nrf24_lastMessageStatus();
	///* Retransmission count indicates the transmission quality */
	//temp = nrf24_retransmissionCount();

	/* Or you might want to power down after TX */
	nrf24_powerDown();
 454:	0e 94 90 03 	call	0x720	; 0x720 <nrf24_powerDown>
				sendData(id);
			}
		}
		
		// Go to sleep!
				sleep();
 458:	0e 94 bd 00 	call	0x17a	; 0x17a <sleep>
		
	}
 45c:	a4 cf       	rjmp	.-184    	; 0x3a6 <main+0xb6>

0000045e <SPItransfer>:
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
}

/* software spi routine */
static uint8_t SPItransfer(uint8_t tx)
{
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	e8 2e       	mov	r14, r24
	uint8_t i = 0;
	uint8_t rx = 0;

	nrf24_sck_digitalWrite(LOW);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 aa 03 	call	0x754	; 0x754 <nrf24_sck_digitalWrite>
 470:	c7 e0       	ldi	r28, 0x07	; 7
 472:	d0 e0       	ldi	r29, 0x00	; 0

/* software spi routine */
static uint8_t SPItransfer(uint8_t tx)
{
	uint8_t i = 0;
	uint8_t rx = 0;
 474:	10 e0       	ldi	r17, 0x00	; 0
	nrf24_sck_digitalWrite(LOW);

	for(i=0;i<8;i++)
	{

		if(tx & (1<<(7-i)))
 476:	f1 2c       	mov	r15, r1
 478:	97 01       	movw	r18, r14
 47a:	0c 2e       	mov	r0, r28
 47c:	02 c0       	rjmp	.+4      	; 0x482 <SPItransfer+0x24>
 47e:	35 95       	asr	r19
 480:	27 95       	ror	r18
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <SPItransfer+0x20>
 486:	20 ff       	sbrs	r18, 0
 488:	04 c0       	rjmp	.+8      	; 0x492 <SPItransfer+0x34>
		{
			nrf24_mosi_digitalWrite(HIGH);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24_mosi_digitalWrite>
 490:	03 c0       	rjmp	.+6      	; 0x498 <SPItransfer+0x3a>
		}
		else
		{
			nrf24_mosi_digitalWrite(LOW);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 b0 03 	call	0x760	; 0x760 <nrf24_mosi_digitalWrite>
		}

		nrf24_sck_digitalWrite(HIGH);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 aa 03 	call	0x754	; 0x754 <nrf24_sck_digitalWrite>

		rx = rx << 1;
 49e:	11 0f       	add	r17, r17
		if(nrf24_miso_digitalRead())
 4a0:	0e 94 b6 03 	call	0x76c	; 0x76c <nrf24_miso_digitalRead>
 4a4:	81 11       	cpse	r24, r1
		{
			rx |= 0x01;
 4a6:	11 60       	ori	r17, 0x01	; 1
		}

		nrf24_sck_digitalWrite(LOW);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 aa 03 	call	0x754	; 0x754 <nrf24_sck_digitalWrite>
 4ae:	21 97       	sbiw	r28, 0x01	; 1
 4b0:	18 f7       	brcc	.-58     	; 0x478 <SPItransfer+0x1a>

	}

	return rx;
}
 4b2:	81 2f       	mov	r24, r17
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	08 95       	ret

000004c0 <nrf24_configRegister>:
		nrf24_csn_digitalWrite(HIGH);
		return rv;
}

void nrf24_configRegister(uint8_t reg, uint8_t value)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	c8 2f       	mov	r28, r24
 4c6:	d6 2f       	mov	r29, r22
	nrf24_csn_digitalWrite(LOW);
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
	SPItransfer(W_REGISTER | (REGISTER_MASK & reg));
 4ce:	8c 2f       	mov	r24, r28
 4d0:	8f 71       	andi	r24, 0x1F	; 31
 4d2:	80 62       	ori	r24, 0x20	; 32
 4d4:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
	SPItransfer(value);
 4d8:	8d 2f       	mov	r24, r29
 4da:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
	nrf24_csn_digitalWrite(HIGH);
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <nrf24_writeRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	c8 2f       	mov	r28, r24
 4f8:	7b 01       	movw	r14, r22
 4fa:	14 2f       	mov	r17, r20
	nrf24_csn_digitalWrite(LOW);
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
	SPItransfer(W_REGISTER | (REGISTER_MASK & reg));
 502:	8c 2f       	mov	r24, r28
 504:	8f 71       	andi	r24, 0x1F	; 31
 506:	80 62       	ori	r24, 0x20	; 32
 508:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
/* send multiple bytes over SPI */
static void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	uint8_t i;
	
	for(i=0;i<len;i++)
 50c:	11 23       	and	r17, r17
 50e:	71 f0       	breq	.+28     	; 0x52c <nrf24_writeRegister+0x42>
 510:	e7 01       	movw	r28, r14
 512:	11 50       	subi	r17, 0x01	; 1
 514:	01 2f       	mov	r16, r17
 516:	10 e0       	ldi	r17, 0x00	; 0
 518:	0f 5f       	subi	r16, 0xFF	; 255
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	0e 0d       	add	r16, r14
 51e:	1f 1d       	adc	r17, r15
	{
		SPItransfer(dataout[i]);
 520:	89 91       	ld	r24, Y+
 522:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
/* send multiple bytes over SPI */
static void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
{
	uint8_t i;
	
	for(i=0;i<len;i++)
 526:	c0 17       	cp	r28, r16
 528:	d1 07       	cpc	r29, r17
 52a:	d1 f7       	brne	.-12     	; 0x520 <nrf24_writeRegister+0x36>
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
	nrf24_csn_digitalWrite(LOW);
	SPItransfer(W_REGISTER | (REGISTER_MASK & reg));
	nrf24_transmitSync(value,len);
	nrf24_csn_digitalWrite(HIGH);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
}
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	08 95       	ret

00000540 <nrf24_transferSyncReg>:
	}
	nrf24_csn_digitalWrite(HIGH);

}
static void nrf24_transferSyncReg(uint8_t* dataout,uint8_t reg, uint8_t* datain, uint8_t len)
{
 540:	bf 92       	push	r11
 542:	cf 92       	push	r12
 544:	df 92       	push	r13
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	6c 01       	movw	r12, r24
 554:	c6 2f       	mov	r28, r22
 556:	b4 2e       	mov	r11, r20
 558:	e5 2e       	mov	r14, r21
 55a:	f2 2e       	mov	r15, r18
	nrf24_csn_digitalWrite(LOW);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
	SPItransfer(reg);
 562:	8c 2f       	mov	r24, r28
 564:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
	for(uint8_t i=0;i<len;i++)
 568:	ff 20       	and	r15, r15
 56a:	a1 f0       	breq	.+40     	; 0x594 <nrf24_transferSyncReg+0x54>
 56c:	e6 01       	movw	r28, r12
 56e:	0b 2d       	mov	r16, r11
 570:	1e 2d       	mov	r17, r14
 572:	fa 94       	dec	r15
 574:	ef 2c       	mov	r14, r15
 576:	f1 2c       	mov	r15, r1
 578:	8f ef       	ldi	r24, 0xFF	; 255
 57a:	e8 1a       	sub	r14, r24
 57c:	f8 0a       	sbc	r15, r24
 57e:	ec 0c       	add	r14, r12
 580:	fd 1c       	adc	r15, r13
	{
		datain[i] = SPItransfer(dataout[i]);
 582:	89 91       	ld	r24, Y+
 584:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
 588:	f8 01       	movw	r30, r16
 58a:	81 93       	st	Z+, r24
 58c:	8f 01       	movw	r16, r30
}
static void nrf24_transferSyncReg(uint8_t* dataout,uint8_t reg, uint8_t* datain, uint8_t len)
{
	nrf24_csn_digitalWrite(LOW);
	SPItransfer(reg);
	for(uint8_t i=0;i<len;i++)
 58e:	ce 15       	cp	r28, r14
 590:	df 05       	cpc	r29, r15
 592:	b9 f7       	brne	.-18     	; 0x582 <nrf24_transferSyncReg+0x42>
	{
		datain[i] = SPItransfer(dataout[i]);
	}
	nrf24_csn_digitalWrite(HIGH);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>

}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	bf 90       	pop	r11
 5ac:	08 95       	ret

000005ae <SpiTransferCsn>:
	{
		SPItransfer(dataout[i]);
	}

}
static uint8_t SpiTransferCsn(uint8_t data) {
 5ae:	cf 93       	push	r28
 5b0:	c8 2f       	mov	r28, r24
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
	rv = SPItransfer(data);
 5b8:	8c 2f       	mov	r24, r28
 5ba:	0e 94 2f 02 	call	0x45e	; 0x45e <SPItransfer>
 5be:	c8 2f       	mov	r28, r24
		nrf24_csn_digitalWrite(HIGH);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>
		return rv;
}
 5c6:	8c 2f       	mov	r24, r28
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <nrf24_getStatus>:

}

uint8_t nrf24_getStatus()
{
	return SpiTransferCsn(NOP);
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SpiTransferCsn>
}
 5d2:	08 95       	ret

000005d4 <nrf24_isSending>:
uint8_t nrf24_isSending()
{
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 5d4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <nrf24_getStatus>
	
	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 5d8:	98 2f       	mov	r25, r24
 5da:	90 73       	andi	r25, 0x30	; 48
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	09 f0       	breq	.+2      	; 0x5e2 <nrf24_isSending+0xe>
 5e0:	80 e0       	ldi	r24, 0x00	; 0
		return 0; /* false */
	}

	return 1; /* true */

}
 5e2:	08 95       	ret

000005e4 <nrf24_powerUpRx>:
	}
}

void nrf24_powerUpRx()
{
	SpiTransferCsn(FLUSH_RX);
 5e4:	82 ee       	ldi	r24, 0xE2	; 226
 5e6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SpiTransferCsn>

	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 5ea:	60 e7       	ldi	r22, 0x70	; 112
 5ec:	87 e0       	ldi	r24, 0x07	; 7
 5ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));
 5f8:	6f e0       	ldi	r22, 0x0F	; 15
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_ce_digitalWrite(HIGH);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
 606:	08 95       	ret

00000608 <nrf24_init>:
 //#include "SPI/tinySPI.h"
uint8_t payload_len;

/* init the hardware pins */
void nrf24_init(uint8_t channel, uint8_t pay_length, uint8_t * rxAdr, uint8_t * txAdr)
{
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	f8 2e       	mov	r15, r24
 616:	e6 2e       	mov	r14, r22
 618:	8a 01       	movw	r16, r20
 61a:	e9 01       	movw	r28, r18
	nrf24_setupPins();
 61c:	0e 94 98 03 	call	0x730	; 0x730 <nrf24_setupPins>
	//SPIbegin();
	nrf24_ce_digitalWrite(LOW);
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 a4 03 	call	0x748	; 0x748 <nrf24_csn_digitalWrite>


	/* Use static payload length ... */
	payload_len = pay_length;
 62c:	e0 92 13 01 	sts	0x0113, r14

	// Set RF channel
	nrf24_configRegister(RF_CH,channel);
 630:	6f 2d       	mov	r22, r15
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	81 e1       	ldi	r24, 0x11	; 17
 63c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
 640:	60 91 13 01 	lds	r22, 0x0113
 644:	82 e1       	ldi	r24, 0x12	; 18
 646:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	83 e1       	ldi	r24, 0x13	; 19
 64e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	84 e1       	ldi	r24, 0x14	; 20
 656:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	85 e1       	ldi	r24, 0x15	; 21
 65e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	86 e1       	ldi	r24, 0x16	; 22
 666:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 66a:	66 e0       	ldi	r22, 0x06	; 6
 66c:	86 e0       	ldi	r24, 0x06	; 6
 66e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
 672:	6c e0       	ldi	r22, 0x0C	; 12
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 67a:	63 e0       	ldi	r22, 0x03	; 3
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	82 e0       	ldi	r24, 0x02	; 2
 686:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR,(0x0F<<ARD)|(0x0F<<ARC));
 68a:	6f ef       	ldi	r22, 0xFF	; 255
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	8c e1       	ldi	r24, 0x1C	; 28
 696:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
			nrf24_writeRegister(RX_ADDR_P0,txAdr,nrf24_ADDR_LEN);
 69a:	45 e0       	ldi	r20, 0x05	; 5
 69c:	be 01       	movw	r22, r28
 69e:	8a e0       	ldi	r24, 0x0A	; 10
 6a0:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrf24_writeRegister>
			nrf24_writeRegister(TX_ADDR,txAdr,nrf24_ADDR_LEN);
 6a4:	45 e0       	ldi	r20, 0x05	; 5
 6a6:	be 01       	movw	r22, r28
 6a8:	80 e1       	ldi	r24, 0x10	; 16
 6aa:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrf24_writeRegister>
	nrf24_ce_digitalWrite(LOW);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,rxAdr,nrf24_ADDR_LEN);
 6b4:	45 e0       	ldi	r20, 0x05	; 5
 6b6:	b8 01       	movw	r22, r16
 6b8:	8b e0       	ldi	r24, 0x0B	; 11
 6ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);	// Start listening
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	nrf24_powerUpRx();
 6c4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <nrf24_powerUpRx>
}
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	08 95       	ret

000006d6 <nrf24_powerUpTx>:
	nrf24_ce_digitalWrite(HIGH);
}

void nrf24_powerUpTx()
{
	nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT));
 6d6:	60 e7       	ldi	r22, 0x70	; 112
 6d8:	87 e0       	ldi	r24, 0x07	; 7
 6da:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>

	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 6de:	6e e0       	ldi	r22, 0x0E	; 14
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
 6e6:	08 95       	ret

000006e8 <nrf24_send>:
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value)
{
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	ec 01       	movw	r28, r24
	/* Go to Standby-I first */
	nrf24_ce_digitalWrite(LOW);
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	
	/* Set to transmitter mode , Power up if needed */
	nrf24_powerUpTx();
 6f4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <nrf24_powerUpTx>

	/* Do we really need to flush TX fifo each time ? */
	#if 1
		SpiTransferCsn(FLUSH_TX);
 6f8:	81 ee       	ldi	r24, 0xE1	; 225
 6fa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <SpiTransferCsn>

	/* Pull down chip select */


	/* Write payload */
	nrf24_transferSyncReg(value,W_TX_PAYLOAD,value,payload_len);
 6fe:	20 91 13 01 	lds	r18, 0x0113
 702:	ae 01       	movw	r20, r28
 704:	60 ea       	ldi	r22, 0xA0	; 160
 706:	ce 01       	movw	r24, r28
 708:	0e 94 a0 02 	call	0x540	; 0x540 <nrf24_transferSyncReg>

	/* Pull up chip select */

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>

		while(nrf24_isSending());
 712:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <nrf24_isSending>
 716:	81 11       	cpse	r24, r1
 718:	fc cf       	rjmp	.-8      	; 0x712 <nrf24_send+0x2a>

}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <nrf24_powerDown>:
	nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
}

void nrf24_powerDown()
{
	nrf24_ce_digitalWrite(LOW);
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 9e 03 	call	0x73c	; 0x73c <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,nrf24_CONFIG);
 726:	6c e0       	ldi	r22, 0x0C	; 12
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nrf24_configRegister>
 72e:	08 95       	ret

00000730 <nrf24_setupPins>:
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
	set_bit(DDRD,3); // CE output
 730:	53 9a       	sbi	0x0a, 3	; 10
	set_bit(DDRB,1); // CSN output
 732:	21 9a       	sbi	0x04, 1	; 4
	set_bit(DDRD,4); // SCK output
 734:	54 9a       	sbi	0x0a, 4	; 10
	set_bit(DDRD,6); // MOSI output
 736:	56 9a       	sbi	0x0a, 6	; 10
	clr_bit(DDRD,5); // MISO input
 738:	55 98       	cbi	0x0a, 5	; 10
 73a:	08 95       	ret

0000073c <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 73c:	88 23       	and	r24, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <nrf24_ce_digitalWrite+0x8>
	{
		set_bit(PORTD,3);
 740:	5b 9a       	sbi	0x0b, 3	; 11
 742:	08 95       	ret
	}
	else
	{
		clr_bit(PORTD,3);
 744:	5b 98       	cbi	0x0b, 3	; 11
 746:	08 95       	ret

00000748 <nrf24_csn_digitalWrite>:
	}
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 748:	88 23       	and	r24, r24
 74a:	11 f0       	breq	.+4      	; 0x750 <nrf24_csn_digitalWrite+0x8>
	{
		set_bit(PORTB,1);
 74c:	29 9a       	sbi	0x05, 1	; 5
 74e:	08 95       	ret
	}
	else
	{
		clr_bit(PORTB,1);
 750:	29 98       	cbi	0x05, 1	; 5
 752:	08 95       	ret

00000754 <nrf24_sck_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{

	if(state)
 754:	88 23       	and	r24, r24
 756:	11 f0       	breq	.+4      	; 0x75c <nrf24_sck_digitalWrite+0x8>

	{
		set_bit(PORTD,4);
 758:	5c 9a       	sbi	0x0b, 4	; 11
 75a:	08 95       	ret
	}
	else
	{
		clr_bit(PORTD,4);
 75c:	5c 98       	cbi	0x0b, 4	; 11
 75e:	08 95       	ret

00000760 <nrf24_mosi_digitalWrite>:
	}
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
	if(state)
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <nrf24_mosi_digitalWrite+0x8>
	{
		set_bit(PORTD,6);
 764:	5e 9a       	sbi	0x0b, 6	; 11
 766:	08 95       	ret
	}
	else
	{
		clr_bit(PORTD,6);
 768:	5e 98       	cbi	0x0b, 6	; 11
 76a:	08 95       	ret

0000076c <nrf24_miso_digitalRead>:
	}
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
	return check_bit(PIND,5);
 76c:	89 b1       	in	r24, 0x09	; 9
}
 76e:	80 72       	andi	r24, 0x20	; 32
 770:	08 95       	ret

00000772 <xtea_enc>:
 *   and slightly modified
 */
 
#include <stdint.h> 

void xtea_enc(void *dest, const void *v, const void *k) {
 772:	4f 92       	push	r4
 774:	5f 92       	push	r5
 776:	6f 92       	push	r6
 778:	7f 92       	push	r7
 77a:	8f 92       	push	r8
 77c:	9f 92       	push	r9
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	ec 01       	movw	r28, r24
 794:	fa 01       	movw	r30, r20
    uint8_t i;
    uint32_t v0=((uint32_t*)v)[0], v1=((uint32_t*)v)[1];
 796:	db 01       	movw	r26, r22
 798:	8d 90       	ld	r8, X+
 79a:	9d 90       	ld	r9, X+
 79c:	ad 90       	ld	r10, X+
 79e:	bc 90       	ld	r11, X
 7a0:	13 97       	sbiw	r26, 0x03	; 3
 7a2:	14 96       	adiw	r26, 0x04	; 4
 7a4:	cd 90       	ld	r12, X+
 7a6:	dd 90       	ld	r13, X+
 7a8:	ed 90       	ld	r14, X+
 7aa:	fc 90       	ld	r15, X
 7ac:	17 97       	sbiw	r26, 0x07	; 7
    uint32_t sum=0, delta=0x9E3779B9;
 7ae:	00 e0       	ldi	r16, 0x00	; 0
 7b0:	10 e0       	ldi	r17, 0x00	; 0
 7b2:	98 01       	movw	r18, r16
    for(i=0; i<32; i++) {
        v0 += ((v1 << 4 ^ v1 >> 5) + v1) ^ (sum + ((uint32_t*)k)[sum & 3]);
 7b4:	d8 01       	movw	r26, r16
 7b6:	a3 70       	andi	r26, 0x03	; 3
 7b8:	bb 27       	eor	r27, r27
 7ba:	aa 0f       	add	r26, r26
 7bc:	bb 1f       	adc	r27, r27
 7be:	aa 0f       	add	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	ae 0f       	add	r26, r30
 7c4:	bf 1f       	adc	r27, r31
 7c6:	4d 90       	ld	r4, X+
 7c8:	5d 90       	ld	r5, X+
 7ca:	6d 90       	ld	r6, X+
 7cc:	7c 90       	ld	r7, X
 7ce:	40 0e       	add	r4, r16
 7d0:	51 1e       	adc	r5, r17
 7d2:	62 1e       	adc	r6, r18
 7d4:	73 1e       	adc	r7, r19
 7d6:	b7 01       	movw	r22, r14
 7d8:	a6 01       	movw	r20, r12
 7da:	68 94       	set
 7dc:	14 f8       	bld	r1, 4
 7de:	76 95       	lsr	r23
 7e0:	67 95       	ror	r22
 7e2:	57 95       	ror	r21
 7e4:	47 95       	ror	r20
 7e6:	16 94       	lsr	r1
 7e8:	d1 f7       	brne	.-12     	; 0x7de <xtea_enc+0x6c>
 7ea:	d7 01       	movw	r26, r14
 7ec:	c6 01       	movw	r24, r12
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	aa 1f       	adc	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	aa 1f       	adc	r26, r26
 7fc:	bb 1f       	adc	r27, r27
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	aa 1f       	adc	r26, r26
 804:	bb 1f       	adc	r27, r27
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	aa 1f       	adc	r26, r26
 80c:	bb 1f       	adc	r27, r27
 80e:	84 27       	eor	r24, r20
 810:	95 27       	eor	r25, r21
 812:	a6 27       	eor	r26, r22
 814:	b7 27       	eor	r27, r23
 816:	8c 0d       	add	r24, r12
 818:	9d 1d       	adc	r25, r13
 81a:	ae 1d       	adc	r26, r14
 81c:	bf 1d       	adc	r27, r15
 81e:	48 26       	eor	r4, r24
 820:	59 26       	eor	r5, r25
 822:	6a 26       	eor	r6, r26
 824:	7b 26       	eor	r7, r27
 826:	84 0c       	add	r8, r4
 828:	95 1c       	adc	r9, r5
 82a:	a6 1c       	adc	r10, r6
 82c:	b7 1c       	adc	r11, r7
        sum += delta;
 82e:	07 54       	subi	r16, 0x47	; 71
 830:	16 48       	sbci	r17, 0x86	; 134
 832:	28 4c       	sbci	r18, 0xC8	; 200
 834:	31 46       	sbci	r19, 0x61	; 97
        v1 += ((v0 << 4 ^ v0 >> 5) + v0) ^ (sum + ((uint32_t*)k)[sum>>11 & 3]);
 836:	d5 01       	movw	r26, r10
 838:	c4 01       	movw	r24, r8
 83a:	68 94       	set
 83c:	14 f8       	bld	r1, 4
 83e:	b6 95       	lsr	r27
 840:	a7 95       	ror	r26
 842:	97 95       	ror	r25
 844:	87 95       	ror	r24
 846:	16 94       	lsr	r1
 848:	d1 f7       	brne	.-12     	; 0x83e <xtea_enc+0xcc>
 84a:	b5 01       	movw	r22, r10
 84c:	a4 01       	movw	r20, r8
 84e:	44 0f       	add	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	66 1f       	adc	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	44 0f       	add	r20, r20
 858:	55 1f       	adc	r21, r21
 85a:	66 1f       	adc	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	44 0f       	add	r20, r20
 860:	55 1f       	adc	r21, r21
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	44 0f       	add	r20, r20
 868:	55 1f       	adc	r21, r21
 86a:	66 1f       	adc	r22, r22
 86c:	77 1f       	adc	r23, r23
 86e:	48 27       	eor	r20, r24
 870:	59 27       	eor	r21, r25
 872:	6a 27       	eor	r22, r26
 874:	7b 27       	eor	r23, r27
 876:	48 0d       	add	r20, r8
 878:	59 1d       	adc	r21, r9
 87a:	6a 1d       	adc	r22, r10
 87c:	7b 1d       	adc	r23, r11
 87e:	d9 01       	movw	r26, r18
 880:	c8 01       	movw	r24, r16
 882:	07 2e       	mov	r0, r23
 884:	7b e0       	ldi	r23, 0x0B	; 11
 886:	b6 95       	lsr	r27
 888:	a7 95       	ror	r26
 88a:	97 95       	ror	r25
 88c:	87 95       	ror	r24
 88e:	7a 95       	dec	r23
 890:	d1 f7       	brne	.-12     	; 0x886 <xtea_enc+0x114>
 892:	70 2d       	mov	r23, r0
 894:	dc 01       	movw	r26, r24
 896:	a3 70       	andi	r26, 0x03	; 3
 898:	bb 27       	eor	r27, r27
 89a:	aa 0f       	add	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	aa 0f       	add	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	ae 0f       	add	r26, r30
 8a4:	bf 1f       	adc	r27, r31
 8a6:	8d 91       	ld	r24, X+
 8a8:	9d 91       	ld	r25, X+
 8aa:	0d 90       	ld	r0, X+
 8ac:	bc 91       	ld	r27, X
 8ae:	a0 2d       	mov	r26, r0
 8b0:	80 0f       	add	r24, r16
 8b2:	91 1f       	adc	r25, r17
 8b4:	a2 1f       	adc	r26, r18
 8b6:	b3 1f       	adc	r27, r19
 8b8:	48 27       	eor	r20, r24
 8ba:	59 27       	eor	r21, r25
 8bc:	6a 27       	eor	r22, r26
 8be:	7b 27       	eor	r23, r27
 8c0:	c4 0e       	add	r12, r20
 8c2:	d5 1e       	adc	r13, r21
 8c4:	e6 1e       	adc	r14, r22
 8c6:	f7 1e       	adc	r15, r23

void xtea_enc(void *dest, const void *v, const void *k) {
    uint8_t i;
    uint32_t v0=((uint32_t*)v)[0], v1=((uint32_t*)v)[1];
    uint32_t sum=0, delta=0x9E3779B9;
    for(i=0; i<32; i++) {
 8c8:	00 32       	cpi	r16, 0x20	; 32
 8ca:	b7 e3       	ldi	r27, 0x37	; 55
 8cc:	1b 07       	cpc	r17, r27
 8ce:	bf ee       	ldi	r27, 0xEF	; 239
 8d0:	2b 07       	cpc	r18, r27
 8d2:	b6 ec       	ldi	r27, 0xC6	; 198
 8d4:	3b 07       	cpc	r19, r27
 8d6:	09 f0       	breq	.+2      	; 0x8da <xtea_enc+0x168>
 8d8:	6d cf       	rjmp	.-294    	; 0x7b4 <xtea_enc+0x42>
        v0 += ((v1 << 4 ^ v1 >> 5) + v1) ^ (sum + ((uint32_t*)k)[sum & 3]);
        sum += delta;
        v1 += ((v0 << 4 ^ v0 >> 5) + v0) ^ (sum + ((uint32_t*)k)[sum>>11 & 3]);
    }
    ((uint32_t*)dest)[0]=v0; ((uint32_t*)dest)[1]=v1;
 8da:	88 82       	st	Y, r8
 8dc:	99 82       	std	Y+1, r9	; 0x01
 8de:	aa 82       	std	Y+2, r10	; 0x02
 8e0:	bb 82       	std	Y+3, r11	; 0x03
 8e2:	cc 82       	std	Y+4, r12	; 0x04
 8e4:	dd 82       	std	Y+5, r13	; 0x05
 8e6:	ee 82       	std	Y+6, r14	; 0x06
 8e8:	ff 82       	std	Y+7, r15	; 0x07
}
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	ff 90       	pop	r15
 8f4:	ef 90       	pop	r14
 8f6:	df 90       	pop	r13
 8f8:	cf 90       	pop	r12
 8fa:	bf 90       	pop	r11
 8fc:	af 90       	pop	r10
 8fe:	9f 90       	pop	r9
 900:	8f 90       	pop	r8
 902:	7f 90       	pop	r7
 904:	6f 90       	pop	r6
 906:	5f 90       	pop	r5
 908:	4f 90       	pop	r4
 90a:	08 95       	ret

0000090c <__divmodsi4>:
 90c:	05 2e       	mov	r0, r21
 90e:	97 fb       	bst	r25, 7
 910:	1e f4       	brtc	.+6      	; 0x918 <__divmodsi4+0xc>
 912:	00 94       	com	r0
 914:	0e 94 9d 04 	call	0x93a	; 0x93a <__negsi2>
 918:	57 fd       	sbrc	r21, 7
 91a:	07 d0       	rcall	.+14     	; 0x92a <__divmodsi4_neg2>
 91c:	0e 94 a5 04 	call	0x94a	; 0x94a <__udivmodsi4>
 920:	07 fc       	sbrc	r0, 7
 922:	03 d0       	rcall	.+6      	; 0x92a <__divmodsi4_neg2>
 924:	4e f4       	brtc	.+18     	; 0x938 <__divmodsi4_exit>
 926:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__negsi2>

0000092a <__divmodsi4_neg2>:
 92a:	50 95       	com	r21
 92c:	40 95       	com	r20
 92e:	30 95       	com	r19
 930:	21 95       	neg	r18
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	4f 4f       	sbci	r20, 0xFF	; 255
 936:	5f 4f       	sbci	r21, 0xFF	; 255

00000938 <__divmodsi4_exit>:
 938:	08 95       	ret

0000093a <__negsi2>:
 93a:	90 95       	com	r25
 93c:	80 95       	com	r24
 93e:	70 95       	com	r23
 940:	61 95       	neg	r22
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	8f 4f       	sbci	r24, 0xFF	; 255
 946:	9f 4f       	sbci	r25, 0xFF	; 255
 948:	08 95       	ret

0000094a <__udivmodsi4>:
 94a:	a1 e2       	ldi	r26, 0x21	; 33
 94c:	1a 2e       	mov	r1, r26
 94e:	aa 1b       	sub	r26, r26
 950:	bb 1b       	sub	r27, r27
 952:	fd 01       	movw	r30, r26
 954:	0d c0       	rjmp	.+26     	; 0x970 <__udivmodsi4_ep>

00000956 <__udivmodsi4_loop>:
 956:	aa 1f       	adc	r26, r26
 958:	bb 1f       	adc	r27, r27
 95a:	ee 1f       	adc	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	a2 17       	cp	r26, r18
 960:	b3 07       	cpc	r27, r19
 962:	e4 07       	cpc	r30, r20
 964:	f5 07       	cpc	r31, r21
 966:	20 f0       	brcs	.+8      	; 0x970 <__udivmodsi4_ep>
 968:	a2 1b       	sub	r26, r18
 96a:	b3 0b       	sbc	r27, r19
 96c:	e4 0b       	sbc	r30, r20
 96e:	f5 0b       	sbc	r31, r21

00000970 <__udivmodsi4_ep>:
 970:	66 1f       	adc	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	1a 94       	dec	r1
 97a:	69 f7       	brne	.-38     	; 0x956 <__udivmodsi4_loop>
 97c:	60 95       	com	r22
 97e:	70 95       	com	r23
 980:	80 95       	com	r24
 982:	90 95       	com	r25
 984:	9b 01       	movw	r18, r22
 986:	ac 01       	movw	r20, r24
 988:	bd 01       	movw	r22, r26
 98a:	cf 01       	movw	r24, r30
 98c:	08 95       	ret

0000098e <strcat>:
 98e:	fb 01       	movw	r30, r22
 990:	dc 01       	movw	r26, r24
 992:	0d 90       	ld	r0, X+
 994:	00 20       	and	r0, r0
 996:	e9 f7       	brne	.-6      	; 0x992 <strcat+0x4>
 998:	11 97       	sbiw	r26, 0x01	; 1
 99a:	01 90       	ld	r0, Z+
 99c:	0d 92       	st	X+, r0
 99e:	00 20       	and	r0, r0
 9a0:	e1 f7       	brne	.-8      	; 0x99a <strcat+0xc>
 9a2:	08 95       	ret

000009a4 <itoa>:
 9a4:	45 32       	cpi	r20, 0x25	; 37
 9a6:	51 05       	cpc	r21, r1
 9a8:	20 f4       	brcc	.+8      	; 0x9b2 <itoa+0xe>
 9aa:	42 30       	cpi	r20, 0x02	; 2
 9ac:	10 f0       	brcs	.+4      	; 0x9b2 <itoa+0xe>
 9ae:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__itoa_ncheck>
 9b2:	fb 01       	movw	r30, r22
 9b4:	10 82       	st	Z, r1
 9b6:	cb 01       	movw	r24, r22
 9b8:	08 95       	ret

000009ba <__itoa_ncheck>:
 9ba:	bb 27       	eor	r27, r27
 9bc:	4a 30       	cpi	r20, 0x0A	; 10
 9be:	31 f4       	brne	.+12     	; 0x9cc <__itoa_ncheck+0x12>
 9c0:	99 23       	and	r25, r25
 9c2:	22 f4       	brpl	.+8      	; 0x9cc <__itoa_ncheck+0x12>
 9c4:	bd e2       	ldi	r27, 0x2D	; 45
 9c6:	90 95       	com	r25
 9c8:	81 95       	neg	r24
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__utoa_common>

000009d0 <__utoa_ncheck>:
 9d0:	bb 27       	eor	r27, r27

000009d2 <__utoa_common>:
 9d2:	fb 01       	movw	r30, r22
 9d4:	55 27       	eor	r21, r21
 9d6:	aa 27       	eor	r26, r26
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	aa 1f       	adc	r26, r26
 9de:	a4 17       	cp	r26, r20
 9e0:	10 f0       	brcs	.+4      	; 0x9e6 <__utoa_common+0x14>
 9e2:	a4 1b       	sub	r26, r20
 9e4:	83 95       	inc	r24
 9e6:	50 51       	subi	r21, 0x10	; 16
 9e8:	b9 f7       	brne	.-18     	; 0x9d8 <__utoa_common+0x6>
 9ea:	a0 5d       	subi	r26, 0xD0	; 208
 9ec:	aa 33       	cpi	r26, 0x3A	; 58
 9ee:	08 f0       	brcs	.+2      	; 0x9f2 <__utoa_common+0x20>
 9f0:	a9 5d       	subi	r26, 0xD9	; 217
 9f2:	a1 93       	st	Z+, r26
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	79 f7       	brne	.-34     	; 0x9d6 <__utoa_common+0x4>
 9f8:	b1 11       	cpse	r27, r1
 9fa:	b1 93       	st	Z+, r27
 9fc:	11 92       	st	Z+, r1
 9fe:	cb 01       	movw	r24, r22
 a00:	0c 94 02 05 	jmp	0xa04	; 0xa04 <strrev>

00000a04 <strrev>:
 a04:	dc 01       	movw	r26, r24
 a06:	fc 01       	movw	r30, r24
 a08:	67 2f       	mov	r22, r23
 a0a:	71 91       	ld	r23, Z+
 a0c:	77 23       	and	r23, r23
 a0e:	e1 f7       	brne	.-8      	; 0xa08 <strrev+0x4>
 a10:	32 97       	sbiw	r30, 0x02	; 2
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <strrev+0x18>
 a14:	7c 91       	ld	r23, X
 a16:	6d 93       	st	X+, r22
 a18:	70 83       	st	Z, r23
 a1a:	62 91       	ld	r22, -Z
 a1c:	ae 17       	cp	r26, r30
 a1e:	bf 07       	cpc	r27, r31
 a20:	c8 f3       	brcs	.-14     	; 0xa14 <strrev+0x10>
 a22:	08 95       	ret

00000a24 <eeprom_read_block>:
 a24:	dc 01       	movw	r26, r24
 a26:	cb 01       	movw	r24, r22

00000a28 <eeprom_read_blraw>:
 a28:	fc 01       	movw	r30, r24
 a2a:	f9 99       	sbic	0x1f, 1	; 31
 a2c:	fe cf       	rjmp	.-4      	; 0xa2a <eeprom_read_blraw+0x2>
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <eeprom_read_blraw+0x14>
 a30:	f2 bd       	out	0x22, r31	; 34
 a32:	e1 bd       	out	0x21, r30	; 33
 a34:	f8 9a       	sbi	0x1f, 0	; 31
 a36:	31 96       	adiw	r30, 0x01	; 1
 a38:	00 b4       	in	r0, 0x20	; 32
 a3a:	0d 92       	st	X+, r0
 a3c:	41 50       	subi	r20, 0x01	; 1
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	b8 f7       	brcc	.-18     	; 0xa30 <eeprom_read_blraw+0x8>
 a42:	08 95       	ret

00000a44 <_exit>:
 a44:	f8 94       	cli

00000a46 <__stop_program>:
 a46:	ff cf       	rjmp	.-2      	; 0xa46 <__stop_program>
